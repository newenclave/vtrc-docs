/* UTF8 */

Библиотека предназначена для реализации серверов и клиентов, поддерживающих RPC протокол (vtrc). 

Язык разработки: С++.

Сторонние библиотеки: Boost (http://boost.org/) 
                      Google Protocol Buffers (https://code.google.com/p/protobuf/) далее просто Protobuf

Основные возможности:

    Поддержка транспорта: TCP (для IPv4 и IPv6), Unix domain sockets ("POSIX Local IPC Sockets"; для систем, поддерживающих стандарт POSIX), Windows named pipes (для систем семейства Windows). 
	
    Декларативность: библиотека Protocol Buffers позволяет легко описать сообщения и интерфейс RPC.

    Обратная совместимость протокола: Protobuf обеспечивает обратную совместимость, т.е. совместимость с предыдущими версиями протокола. Новые поля сообщения будут игнорироваться старыми серверами, как и удаленные старые.

    Масштабируемость: Использование Boost.Asio позволяет масштабировать как серверую сторону, так и клиентскую. 

Библиотека позволяет:
    контролировать количество активных вызовов клиента
    устанавливать максимальный размер сообщения как для конкретной серверной точки, так и для каждого клиента в отдельности на стадии инициализации соединения 
    разнести обработку системных событий ввода-вывода и выполнение процедур по разным диспетчерам, либо использовать один. 
    задать для каждого конкретного вызова, либо группы вызовов (service, в терминах Protobuf) таймаут ожидания. 


Поддерживаемые методы удаленных вызовов. 

    Вызовы делятся на 2 типа: с ожиданием (CALL) результата и без ожидания (EVENT). Далее по тексту "сторона A" — сторона, инициализировавшая выполнение процедуры; "сторона B" — сторона, выполняющая процедуру.

В первом случае, (см.  https://github.com/newenclave/vtrc-docs/blob/master/img/call-direct.png) сторона A будет ждать ответа с результатом от стороны B. Ответ может содержать результат работы или ошибку, которая произошла при выполнении. Стоит отметить, что сторона A может указать стороне B то, что она не заинтересована в получении результата, а нужен только факт окончания выполнения. В этом случае сторона B отправит сообщение с пустым результатом, либо с ошибкой, если что-то случилось. Ожидание может быть сброшено по истечению заданного времени (timeout)

Во втором случае (см. https://github.com/newenclave/vtrc-docs/blob/master/img/call-event.png) сторона A просто отправляет сообщение с просьбой выполнить процедуру, но не ждет результат. Другая сторона в этом случае не будет отправлять сообщение с результатом работы. 
